# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import warehouse_service.common_pb2 as common__pb2
import warehouse_service.goods_manager_pb2 as goods__manager__pb2


class GoodsManagerServiceStub(object):
    """Goods manager service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddGood = channel.unary_unary(
                '/goods.v1.GoodsManagerService/AddGood',
                request_serializer=goods__manager__pb2.AddGoodRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.RemoveGood = channel.unary_unary(
                '/goods.v1.GoodsManagerService/RemoveGood',
                request_serializer=goods__manager__pb2.RemoveGoodRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.UpdateGood = channel.unary_unary(
                '/goods.v1.GoodsManagerService/UpdateGood',
                request_serializer=goods__manager__pb2.UpdateGoodRequest.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.GetGoodInfo = channel.unary_unary(
                '/goods.v1.GoodsManagerService/GetGoodInfo',
                request_serializer=goods__manager__pb2.GoodInfoRequest.SerializeToString,
                response_deserializer=goods__manager__pb2.InfoResponse.FromString,
                )


class GoodsManagerServiceServicer(object):
    """Goods manager service
    """

    def AddGood(self, request, context):
        """Add a new good
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveGood(self, request, context):
        """Delete a good
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGood(self, request, context):
        """Update a good
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGoodInfo(self, request, context):
        """Get good's information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GoodsManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddGood': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGood,
                    request_deserializer=goods__manager__pb2.AddGoodRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'RemoveGood': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveGood,
                    request_deserializer=goods__manager__pb2.RemoveGoodRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'UpdateGood': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGood,
                    request_deserializer=goods__manager__pb2.UpdateGoodRequest.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'GetGoodInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGoodInfo,
                    request_deserializer=goods__manager__pb2.GoodInfoRequest.FromString,
                    response_serializer=goods__manager__pb2.InfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'goods.v1.GoodsManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GoodsManagerService(object):
    """Goods manager service
    """

    @staticmethod
    def AddGood(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/goods.v1.GoodsManagerService/AddGood',
            goods__manager__pb2.AddGoodRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveGood(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/goods.v1.GoodsManagerService/RemoveGood',
            goods__manager__pb2.RemoveGoodRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGood(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/goods.v1.GoodsManagerService/UpdateGood',
            goods__manager__pb2.UpdateGoodRequest.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGoodInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/goods.v1.GoodsManagerService/GetGoodInfo',
            goods__manager__pb2.GoodInfoRequest.SerializeToString,
            goods__manager__pb2.InfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
